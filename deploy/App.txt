<!DOCTYPE html>
<html>
<head>
    <title>Feature Summary by Field</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Sat Nov 28 2015 16:06:11 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sat Nov 28 2015 16:06:11 GMT-0700 (MST)";
        var CHECKSUM = 11545914039;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("feature-summary-by-field", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    config: {
        defaultSettings: {
            groupField: 'Release'
        }
    },

    modelName: 'PortfolioItem/Feature',
    fetch: ['FormattedID','Name','State','LeafStoryCount','LeafStoryPlanEstimateTotal','AcceptedLeafStoryCount','AcceptedLeafStoryPlanEstimateTotal','Release'],
    states: [],
    stateField: 'State',

    groupingFieldxtypeMapping: {
        release: {
            xtype: 'rallyreleasecombobox'
        }
    },

    items: [
        {xtype:'container',itemId:'selector_box'},
        {xtype:'container',itemId:'display_box'}
    ],
    launch: function() {
        Rally.data.ModelFactory.getModel({
            type: this.modelName,
            success: function(model) {
                this.model = model;
                model.getField(this.stateField).getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        this.logger.log('callback', records, operation, success);
                        if (success){
                            this.states = _.map(records, function(r){ return r.get('StringValue')});
                            this.logger.log('States: ', this.states);
                            this.addSelector();
                        } else {
                            Rally.ui.notify.Notifier.showError({message: "Error loading State field values: " + operation.error.errors.join(',')});
                        }
                    },
                    scope: this
                });
            },
            scope: this
        });
    },
    getPortfolioItemNameField: function(){
        return this.modelName.split('/').slice(-1)[0];
    },
    addSelector: function(){
        this.down('#selector_box').removeAll();
        var groupFieldConfig = this.getGroupingFieldControlConfig();
        groupFieldConfig.itemId = "group-field",
        groupFieldConfig.fieldLabel = this.model.getField(this.getGroupingField()).displayName;
        groupFieldConfig.labelAlign = 'right';
        groupFieldConfig.margin = '15 15 0 0';
        groupFieldConfig.width = 300;

        this.down('#selector_box').add(groupFieldConfig)
            .on('change', this.updateSummary, this);
    },
    updateSummary: function(cb){
        this.logger.log('updateSummary', cb);

        var fetch = this.fetch.concat([this.getGroupingField]),
            filters = this.getQueryFilter(cb);

        this.logger.log('updateSummary', fetch, filters.toString());

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: this.modelName,
            fetch: fetch,
            filters: filters,
            limit: 'Infinity'
        });
        store.load({
            callback: this.mungeModelData,
            scope: this
        });
    },

    mungeModelData: function(records, operation){
        this.logger.log('mungeModelData', records, operation);
        var summaryMunger = Ext.create('Rally.technicalservices.FeatureSummary',{}),
            stateData = summaryMunger.getStateSummaryData(this.states, records);

        this.logger.log('mungeModelData stateData', stateData);

        this.down('#display_box').removeAll();
        this.addTable(stateData, summaryMunger.getStateColumnCfgs());

        this.fetchUserStories().then({
            success: function(userStories){
                summaryMunger.portfolioItemNameField = this.getPortfolioItemNameField();
                var issuesData = summaryMunger.getIssuesSummaryData(records, userStories);
                this.logger.log('mungeModelData issuesData', issuesData);
                this.addTable(issuesData, summaryMunger.getIssueColumnCfgs());
            },
            failure: function(msg){
                Rally.ui.notify.Notifier.showError({message: msg});
            },
            scope: this
        });
    },
    fetchUserStories: function(){
        var deferred = Ext.create('Deft.Deferred'),
            cmp = this.down('#group-field'),
            fetch = ['FormattedID','Blocked', 'PlanEstimate'].concat([this.getPortfolioItemNameField()]);

        this.logger.log('fetchUserStories', this.getStoryQueryFilter(cmp).toString());

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: 'HierarchicalRequirement',
            filters: this.getStoryQueryFilter(cmp),
            fetch: fetch,
            limit: 'Infinity'
        });
        store.load({
            callback: function(records, operation, success){
                this.logger.log('fetchUserStories',records.length, records, operation, success);
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject('Error loading user stories for Features: ' + operation.error && operation.error.errors.join(','));
                }
            },
            scope: this
        });

        return deferred;
    },
    addTable: function(stateData, columnCfgs){
        var grid = Ext.create('Rally.ui.grid.Grid', {
            store: Ext.create('Rally.data.custom.Store', {
                data: stateData
            }),
            columnCfgs: columnCfgs,
            showPagingToolbar: false,
            padding: 25
        });
        this.down('#display_box').add(grid);
    },
    getStoryQueryFilter: function(cmp){
        var featurePrefix = this.getPortfolioItemNameField() + ".",
            filters = Ext.create('Rally.data.wsapi.Filter',{
                property: 'DirectChildrenCount',
                value: 0
            });
        filters = filters.and({
            property: this.getPortfolioItemNameField(),
            operator: '!=',
            value: ""
        });

        if (this.getGroupingField() === 'Release'){
            if (cmp.getValue()){
                filters = filters.and ({
                    property: featurePrefix + 'Release.ReleaseStartDate',
                    value: Rally.util.DateTime.toIsoString(cmp.getRecord().get('ReleaseStartDate'))
                });
                filters = filters.and({
                    property: featurePrefix + 'Release.ReleaseDate',
                    value: Rally.util.DateTime.toIsoString(cmp.getRecord().get('ReleaseDate'))
                });
                return filters.and({
                    property: featurePrefix + 'Release.Name',
                    value: cmp.getRecord().get('Name')
                });
            } else {
                return filters.and({
                    property: featurePrefix + 'Release',
                    value: ""
                });
            }
        }

        if (cmp.getValue){
            return filters.and({
                property: featurePrefix + this.getGroupingField(),
                value: cmp.getValue()
            });
        }
        return filters.and({
            property: featurePrefix + this.getGroupingField(),
            value: ''
        });
    },
    getQueryFilter: function(cmp){
        if (this.getGroupingField() === 'Release'){
            if (cmp.getValue()){
                var filters = Ext.create('Rally.data.wsapi.Filter', {
                    property: 'Release.ReleaseStartDate',
                    value: Rally.util.DateTime.toIsoString(cmp.getRecord().get('ReleaseStartDate'))
                });
                filters = filters.and({
                    property: 'Release.ReleaseDate',
                    value: Rally.util.DateTime.toIsoString(cmp.getRecord().get('ReleaseDate'))
                });
                return filters.and({
                    property: 'Release.Name',
                    value: cmp.getRecord().get('Name')
                });
            } else {
                return Ext.create('Rally.data.wsapi.Filter', {
                    property: 'Release',
                    value: ""
                });
            }
        }

        if (cmp.getValue()){
            this.logger.log('getQueryFilter', this.getGroupingField(), cmp.getValue());
            return Ext.create('Rally.data.wsapi.Filter', {
                property: this.getGroupingField(),
                value: cmp.getValue()
            });
        }
        return Ext.create('Rally.data.wsapi.Filter', {
            property: this.getGroupingField(),
            value: ''
        });
    },
    getGroupingField: function(){
        return this.getSetting('groupField');
    },
    getGroupingFieldControlConfig: function(){
        return this.groupingFieldxtypeMapping[this.getGroupingField().toLowerCase()] || this.getDefaultGroupingFieldConfig();
    },
    getDefaultGroupingFieldConfig: function(){
        return {
            xtype: 'rallyfieldvaluecombobox',
            model: this.modelName,
            field: this.getGroupingField()
        };
    },
    getSettingsFields: function(){
        return Rally.technicalservices.Settings.getFields(this.modelName)
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this.launch();
    }
});

Ext.define('Rally.technicalservices.FeatureSummary',{

    portfolioItemNameField: null,

    issues:[{
        type: 'noStories',
        displayName: 'Features Missing Leaf Stories',
        countFn: function(record){
            if (record.get('LeafStoryCount') > 0){
                return 0;
            }
            return 1;
        },
        countPctFn: function(features, count){
            return (features.length > 0 ) ? (count/features.length  * 100).toFixed(1) + ' %' : 'NaN';
        }
    },{
        type: 'unestimatedLeafStories',
        displayName: 'Unestimated Leaf Story Count',
        countFn: function(record, stories, portfolioItemNameField){
            var count = 0;
            _.each(stories, function(s){
                var planEstimate = s.get('PlanEstimate');
                planEstimate = planEstimate === null ? -1 : planEstimate;
                if (s.get(portfolioItemNameField)._ref === record.get('_ref') && planEstimate < 0){
                    count++;
                }
            });
            return count;
        },
        countPctFn: function(features, count){
            var storyCount = 0;
            _.each(features, function(f){
                storyCount += f.get('LeafStoryCount') || 0;
            });

            return (storyCount > 0 ) ? (count/storyCount  * 100).toFixed(1) + ' %' : 'NaN';
        }
    },{
        type: 'blockedStories',
        displayName: 'Blocked Leaf Stories',
        countFn: function(record, stories, portfolioItemNameField){
            var count = 0;
            _.each(stories, function(s){
                if (s.get(portfolioItemNameField)._ref === record.get('_ref') && (s.get('Blocked') === true)){
                    count++;
                }
            });
            return count;
        },
        pointsFn: function(record, stories, portfolioItemNameField){
            var points = 0;
            _.each(stories, function(s){
                if (s.get(portfolioItemNameField)._ref === record.get('_ref') && (s.get('Blocked') === true)){
                    points += s.get('PlanEstimate') || 0;
                }
            });
            return points;
        },
        countPctFn: function(features, count){
            var storyCount = 0;
            _.each(features, function(f){
                storyCount += f.get('LeafStoryCount') || 0;
            });

            return (storyCount > 0 ) ? (count/storyCount  * 100).toFixed(1) + ' %' : 'NaN';
        }
    }],

    getStateColumnCfgs: function(){
        var numberWidth = 70;
        return [{
            dataIndex: 'state',
            text: 'Feature State',
            flex: 1
        },{
            dataIndex: 'count',
            text: 'Feature Count',
            width: numberWidth
        },{
            dataIndex: 'storyCount',
            text: 'Total Stories',
            width: numberWidth
        },{
            dataIndex: 'acceptedStoryCount',
            text: 'Accepted Stories',
            width: numberWidth
        },{
            dataIndex: 'totalPoints',
            text: 'Total Points',
            width: numberWidth
        },{
            dataIndex: 'acceptedPoints',
            text: 'Accepted Points',
            width: numberWidth
        }];
    },
    getIssueColumnCfgs: function(){
        var numberWidth = 70;
        return [{
            dataIndex: 'issueName',
            text: 'Potential Issue List',
            flex: 1
        },{
            dataIndex: 'count',
            text: 'Count',
            width: numberWidth
        },{
            dataIndex: 'countPct',
            text: 'Count %',
            width: numberWidth
        },{
            dataIndex: 'points',
            text: 'Points',
            width: numberWidth
        }];
    },
    _initializeSummary: function(types){
        var summary = {};
        _.each(types, function(t){
            summary[t] = {
                count: 0,
                storyCount: 0,
                acceptedStoryCount: 0,
                totalPoints: 0,
                acceptedPoints: 0
            };
        });
        return summary;
    },

    getStateSummaryData: function(states, records){
        var stateSummary = this._initializeSummary(states),
            totalCount = 0,
            totalStoryCount = 0,
            totalAcceptedCount = 0,
            totalPoints = 0,
            totalAcceptedPoints = 0;

        _.each(records, function(r){

            var ss = r.get('State').Name;
            if (stateSummary[ss]){
                stateSummary[ss].count++;
                stateSummary[ss].storyCount += r.get('LeafStoryCount') || 0;
                stateSummary[ss].acceptedStoryCount += r.get('AcceptedLeafStoryCount') || 0;
                stateSummary[ss].totalPoints += r.get('LeafStoryPlanEstimateTotal') || 0;
                stateSummary[ss].acceptedPoints += r.get('AcceptedLeafStoryPlanEstimateTotal') || 0;
            }
            totalCount++;
            totalStoryCount += r.get('LeafStoryCount') || 0;
            totalAcceptedCount += r.get('AcceptedLeafStoryCount') || 0;
            totalPoints += r.get('LeafStoryPlanEstimateTotal') || 0;
            totalAcceptedPoints += r.get('AcceptedLeafStoryPlanEstimateTotal') || 0;
        });

        var data = _.map(states, function(s){
            return {
                state: s || "None",
                count: stateSummary[s].count || 0,
                storyCount: stateSummary[s].storyCount || 0,
                acceptedStoryCount: stateSummary[s].acceptedStoryCount || 0,
                totalPoints: stateSummary[s].totalPoints || 0,
                acceptedPoints: stateSummary[s].acceptedPoints || 0
            };
        });
        data.push({
            state: 'Total',
            count: totalCount,
            storyCount: totalStoryCount,
            acceptedStoryCount: totalAcceptedCount,
            totalPoints: totalPoints,
            acceptedPoints: totalAcceptedPoints
        });

        var acceptedCountPct = totalAcceptedCount/totalStoryCount * 100,
            acceptedPointsPct = totalAcceptedPoints/totalPoints * 100;

        data.push({state: '% Accepted',
            count: '',
            storyCount: '',
            acceptedStoryCount: !isNaN(acceptedCountPct) ? acceptedCountPct.toFixed(1) + " %" : "NaN",
            totalPoints: '',
            acceptedPoints: !isNaN(acceptedPointsPct) ? acceptedPointsPct.toFixed(1) + " %" : "NaN"
        });

        return data;
    },
    getIssuesSummaryData: function(records, userStories){
        var data = [],
            portfolioItemNameField = this.portfolioItemNameField;

        userStories = _.filter(userStories, function(us){
            if (us.get('Feature')){ return true; }
        });

        _.each(this.issues, function(issue){
            var row = {type: issue.type, issueName: issue.displayName, count: 0, points: 0};
            _.each(records, function(r){
                if (issue.countFn){
                    row.count += issue.countFn(r, userStories,portfolioItemNameField);
                }
                if (issue.pointsFn){
                    row.points += issue.pointsFn(r, userStories,portfolioItemNameField);
                } else {
                    row.points = '--';
                }


            });
            if (issue.countPctFn){
                row.countPct = issue.countPctFn(records, row.count);
            } else {
                row.countPct = '--';
            }
            data.push(row);
        });
        return data;
    }
});
(function() {
    var Ext = window.Ext4 || window.Ext;

    Ext.define('Rally.ui.combobox.FieldOptionsCombobox', {
        requires: [],
        extend: 'Rally.ui.combobox.FieldComboBox',
        alias: 'widget.tsfieldoptionscombobox',

        _isNotHidden: function(field) {
            //We want dropdown fields, iteration, release, state?
            var allowedFields = ['Iteration','Release'];
            if (field && Ext.Array.contains(allowedFields, field.name)){
                return true;
            }

            if (field && !field.hidden && field.attributeDefinition &&
                field.attributeDefinition.AttributeType === 'STRING' && field.attributeDefinition.Constrained){
                return true;
            }
            return false;
        }
    });
})();
Ext.define('Rally.technicalservices.Settings',{
    singleton: true,

    getFields: function(modelName){
        var labelWidth = 150;

        return [{
            xtype: 'tsfieldoptionscombobox',
            name: 'groupField',
            model: modelName,
            labelWidth: labelWidth,
            labelAlign: 'right',
            fieldLabel: 'Group Field'
        }];
    }
});

            
               Rally.launchApp('feature-summary-by-field', {
                   name: 'Feature Summary by Field'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>